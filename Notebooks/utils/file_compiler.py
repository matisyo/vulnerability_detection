import re
from solcx import compile_standard, install_solc, compile_source, get_installable_solc_versions

from utils.code_helpers import CommentStringParser


class FileCompiler():
    def __init__(self,file_path,verbose=True):
        self.csp = CommentStringParser(verbose=verbose)

        self.file_path = file_path
        self.filename = file_path.split('/')[-1][:-4]

        self.contract_file =  self._load_contract()
        self.solc_version = ''
        self.all_contract_files = self._split_into_contracts()
        self.contract_names = list(self.all_contract_files.keys())

        self.bytecode,self.solc_version = self._generate_bytecode_from_solv2()

    def _load_contract(self):
        with open(self.file_path, 'r', encoding="utf8") as f:
            contract_file = f.read()
        return contract_file

    def _split_into_contracts(self):
        contratos = {}
        self.clean_contract_file = self.csp.extract_keywords(self.contract_file)

        for contrato in self.clean_contract_file .split('contract')[1:]:
            contract_name = contrato.split('{')[0].strip()
            contract_name = re.sub(' .*', '', contract_name)
            contratos[contract_name] = contrato
        return contratos

    def _get_pragma_row(self, contract):
        m = re.search(f'pragma solidity([^;]*);', contract)
        if m:
            return m.group(0)
        #print("Pragma solidty not specified, human input needed, or default to 0.3.0?")
        return ''

    def _get_pragma_version(self,pragma_row):
        special_char = '@'
        text = pragma_row.replace('"', '').replace('>=', special_char).replace('^', special_char).replace(' ', '')
        m = re.search(f'{special_char}([0-9]|\.)*', text)
        if m:
            return m.group(0)[1:]
        #print(f"Could not simply parse it: {pragma_row} -> {text}")
        
        special_char = '@'
        text = pragma_row.replace('solidity',special_char).replace('"', '').replace('>=', special_char).replace('^', special_char).replace(' ', '')
        m = re.search(f'{special_char}([0-9]|\.)*', text)
        if m:
            return m.group(0)[1:]
        
        #print(f"Could not successfully parse it: {pragma_row} -> {text}")

        return ''
    def _generate_bytecode_from_solv2(self):
        version = self._get_pragma_version(self._get_pragma_row(self.contract_file))
        _solc_version = version
        if _solc_version =='':
            return '','old_version'
        v = _solc_version.split('.')
        #print(f'Solc: {_solc_version}',v)
        if (int(v[1]) < 4) or (int(v[1])==4 and int(v[2]) <11):
            #print(f'Error trying to compile: {_solc_version} ({v})')
            return '','old_version'
        #install_solc(_solc_version)
        try:
            compiled_sol = compile_source(
               self.contract_file,output_values=["bin-runtime"],solc_version=_solc_version
            )
        except:
            #print(f'Error trying to compile {self.filename} with version: {_solc_version}')
            return '','old_version'

        return compiled_sol, _solc_version

    def _generate_bytecode_from_sol(self):
        version = self._get_pragma_version(self._get_pragma_row(self.contract_file))
        _solc_version = version
        if _solc_version =='':
            return '','old_version'
        v = _solc_version.split('.')
        #print(f'Solc: {_solc_version}',v)
        if (int(v[1]) < 4) or (int(v[1])==4 and int(v[2]) <11):
            print(f'Error trying to compile: {_solc_version} ({v})')
            return '','old_version'
        install_solc(_solc_version)
        try:
            compiled_sol = compile_standard(
                {"language": "Solidity",
                 "sources": {self.filename: {"content": self.contract_file}},
                 "settings": {"outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.sourceMap"]}}}
                 },
                solc_version=_solc_version
            )
        except:
            print(f'Error trying to compile {self.filename} with version: {_solc_version}')   
            return '','old_version'
        compilations = {}
        for compiled in compiled_sol['contracts'][self.filename].keys():
            compilations[compiled] = compiled_sol['contracts'][self.filename][compiled]['evm']['bytecode']['object']

        return compilations, _solc_version