import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sys
sys.path.append('../')

#!pip install category_encoders
import category_encoders as ce
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import make_pipeline, Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import StratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score,recall_score,f1_score,precision_score,accuracy_score
import sklearn
sklearn.set_config(display='diagram')
import warnings
warnings.filterwarnings('ignore')



CONTRACTS_PATH = '../contracts'
BYTECODES_PATH = '../data/bytecodes'
OPCODES_PATH = '../data/opcodes'
VULNERABILITIES_PATH = '../data'
DATASETS_PATH = '../data/datasets'
RESULTADOS_PATH = f'../data/resultados'


def get_model_data(dataset,target):
    train = dataset[['opcode_nocds',target]].copy()
    train = train.drop_duplicates().reset_index(drop=True)
    preprocessor = ColumnTransformer([
                                  (f'code_process', make_pipeline(TfidfVectorizer(ngram_range=(1,3))), 'opcode_nocds' ),
                                 ])

    model = make_pipeline(preprocessor, LogisticRegression(max_iter=300))
    return train,model

def train_model(target, resultados, show_importance=True):
    resultados[target] = []
    dataset = pd.read_csv(f'{DATASETS_PATH}/{target}_balanced.csv')[['opcode_nocds', target, 'is_valid']]

    cols = ['opcode_nocds']
    thresholds = np.arange(0, 1, 0.001)

    train, model = get_model_data(dataset, target)

    X_train = dataset[~dataset['is_valid']][cols]
    y_train = dataset[~dataset['is_valid']][target]
    X_valid = dataset[dataset['is_valid']][cols]
    y_valid = dataset[dataset['is_valid']][target]

    model.fit(X_train, y_train)

    if show_importance:
        l = sorted([(c[14:], w) for c, w in zip(model[0].get_feature_names_out(), model[1].coef_[0])],
                   key=lambda x: x[1], reverse=True)

        importances = pd.Series(
            [x[1] for x in l[:10]],
            index=[x[0] for x in l[:10]]
        ).sort_values(ascending=True)

        ax = importances.plot.barh()
        ax.set_title(f"{target} - Logistic Regression Seq Opcodes")
        ax.figure.tight_layout()
        plt.show()

    X_train['pred'] = model.predict_proba(X_train)[:, 1]

    X_valid['pred'] = model.predict_proba(X_valid)[:, 1]

    scores = [f1_score(y_train, (X_train['pred'] >= t).astype('int')) for t in thresholds]
    ix = np.argmax(scores)
    th = thresholds[ix]

    resultados[target].append(round(f1_score(y_valid, (X_valid['pred'] >= th).astype('int')), 6))
    resultados[target].append(round(roc_auc_score(y_valid, (X_valid['pred'] >= th).astype('int')), 6))
    resultados[target].append(round(roc_auc_score(y_valid, X_valid['pred']), 6))
    resultados[target].append(round(precision_score(y_valid, (X_valid['pred'] >= th).astype('int')), 6))
    resultados[target].append(round(recall_score(y_valid, (X_valid['pred'] >= th).astype('int')), 6))
    resultados[target].append(round(accuracy_score(y_valid, (X_valid['pred'] >= th).astype('int')), 6))
    resultados[target].append(f"{(y_valid == 0).sum()}/{y_valid.shape[0]}")


vulnerabilities = ['access_control', 'arithmetic', 'denial_service',
                   'front_running', 'reentrancy', 'time_manipulation',
                   'unchecked_low_calls']

resultados = {
    'fold': ['f1', 'auc-roc', 'auc-roc-th', 'precision', 'recall', 'accuracy', 'size'],
}

for vuln in vulnerabilities:
    print(vuln)
    train_model(vuln, resultados)

pd.DataFrame(resultados).to_csv(f'{RESULTADOS_PATH}/baseline_log_reg.csv', index=False)
