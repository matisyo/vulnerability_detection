import sys
sys.path.append('../')
import pandas as pd
from evmdasm import EvmBytecode

import logging

logging.disable(logging.CRITICAL)

CONTRACTS_PATH = '../contracts'
BYTECODES_PATH = '../data/bytecodes'
OPCODES_PATH = '../data/opcodes'


def extract_opcodes(code):
    try:
        ebc = EvmBytecode(code)
        instrucciones = ebc.disassemble()
        inst=[]
        found=False
        for i in range(len(instrucciones)-1):
            if instrucciones[i].name == 'LOG1' and instrucciones[i+1].name == 'PUSH6':
                found=True
                break
            inst.append(instrucciones[i].name)
        #if not found:
        #    print("Not Found")
        return ','.join(inst)
    except:
        return ''



for i in range(0, 44):
    desde = i * 1000
    hasta = (i + 1) * 1000
    print(desde, hasta, end='\r')
    try:
        btc = pd.read_csv(f'{BYTECODES_PATH}/bytecode_contratos_{desde}_{hasta}.csv')
        btc['opcode'] = btc.code.apply(extract_opcodes)
        btc['opcode_size'] = btc.opcode.apply(lambda x: len(str(x).split(',')))
        btc[(~btc.opcode.isnull()) & (btc.opcode_size > 4)][['file', 'contract', 'opcode', 'size']].to_csv(
            f'{OPCODES_PATH}/opcode_contratos_{desde}_{hasta}.csv', index=False)
    except:
        pass

try:
    btc = pd.read_csv(f'{BYTECODES_PATH}/bytecode_contratos_final.csv')
    btc['opcode'] = btc.code.apply(extract_opcodes)
    btc['opcode_size'] = btc.opcode.apply(lambda x: len(str(x).split(',')))
    btc[(~btc.opcode.isnull()) & (btc.opcode_size > 4)][['file', 'contract', 'opcode', 'size']].to_csv(
        f'{OPCODES_PATH}/opcode_contratos_final.csv', index=False)
except:
    pass
